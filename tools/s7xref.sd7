
(********************************************************************)
(*                                                                  *)
(*  s7xref.sd7     Seed7 Cross Reference Builder for Seed7 source   *)
(*  Copyright (C) 2025  Thomas Mertes                               *)
(*   Modified by Pierre Rouleau: Created the file from code posted  *)
(*                               by Thomas Mertes.                  *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)

#  Note:
#  Compile this file with s7c to create the s7xref executable,
#  or use the s7 interpreter to run it from source.

$ include "seed7_05.s7i";
  include "progs.s7i";



const proc: main is func
  local
    var program: aProgram is program.value;
    var ref_list: globalObjects is ref_list.EMPTY;
    var reference: anObject is NIL;
  begin
    if length(argv(PROGRAM)) >= 1 then
      aProgram := parseFile(argv(PROGRAM)[1]);
      globalObjects := globalObjects(aProgram);
      for anObject range globalObjects do
        writeln(str(anObject) <& "\t" <& file(anObject) <& "\t" <& line(anObject));
      end for;
    end if;
  end func;

# ----------------------------------------------------------------------------
